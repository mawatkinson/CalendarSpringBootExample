package com.mwatkinson.calendar.controllers;

import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mwatkinson.calendar.entity.Calendar;
import com.mwatkinson.calendar.entity.CalendarEvent;
import com.mwatkinson.calendar.entity.User;
import com.mwatkinson.calendar.repository.CalendarEventRepository;
import com.mwatkinson.calendar.repository.CalendarRepository;
import com.mwatkinson.calendar.repository.UserRepository;

/**
 * Calendar application REST services for calendar operations
 * 
 * @author Mark Watkinson
 *
 */
@Controller
@RequestMapping(path="/calendar")
public class CalendarController {

    private static final Logger log = LoggerFactory.getLogger(CalendarController.class);

    private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    
	@Autowired
	private CalendarRepository calendarRepository;
	
	@Autowired
	private CalendarEventRepository calendarEventRepository;
	
	@Autowired
	private UserRepository userRepository;
	
	/**
	 * Validation to ensure the user is authorized to modify the specified calendar.
	 * 
	 * Requires a valid auth token generated by calling REST endpoint /user/authenticate on UserController with the valid user credentials (username/password)
	 * 
	 * @param username Username of calendar owner
	 * @param token Generated authentication token
	 * @return is the user auth token valid
	 */
	private boolean checkToken(String username, String token) {
		User user = userRepository.findByUsername(username);
		return (user!=null && user.getAuthToken().equals(token) && 
				user.getAuthTimestamp().compareTo(Date.from(LocalDateTime.now().minusMinutes(5).atZone(ZoneId.systemDefault()).toInstant())) > 0);
	}

	/**
	 * REST PUT mapping for creating a new calendar.
	 * Requires a valid auth token.
	 * @see checkToken
	 * 
	 * @param request HttpServletRequest to check Authorization header
	 * @param name calendar name
	 * @param username user name
	 * @return String status of the request
	 */
	@PutMapping(path="/")
	public @ResponseBody String addNewCalendar (HttpServletRequest request, @RequestParam String name, @RequestParam String username) {
		String response = "";
		if (checkToken(username, request.getHeader("Authorization"))) {
			Calendar calendar = calendarRepository.findByNameAndUsername(name, username);
			if (calendar == null) {
				calendar = new Calendar(name, username);
				calendarRepository.save(calendar);
				response = "Calendar Created";
			} else {
				response = "Calendar Already Exists";
			}
		} else {
			response = "Authorizaion Invalid";
		}
		log.info("Create new calendar called for name: " + name + " username: " + username + " -> " + response);
		return response;
	}

	/**
	 * REST PUT mapping for creating a new event.
	 * Requires a valid auth token.
	 * @see checkToken
	 * 
	 * @param request HttpServletRequest to check Authorization header
	 * @param name calendar name
	 * @param username user name
	 * @param title event title
	 * @param date event date and time
	 * @param location event location
	 * @param attendees event attendee list
	 * @param reminder event reminder date and time, used to send automated reminder of event
	 * @return String status of the request
	 */
	@PutMapping(path="/event/")
	public @ResponseBody String addNewCalendarEvent (HttpServletRequest request, @RequestParam String name, @RequestParam String username, 
			@RequestParam String title, @RequestParam @DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss") Date date, @RequestParam String location, 
			String attendees, @RequestParam @DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss") Date reminder) {
		String response = "";
		if (checkToken(username, request.getHeader("Authorization"))) {
			Calendar calendar = calendarRepository.findByNameAndUsername(name, username);
			if (calendar != null) {
			CalendarEvent event = new CalendarEvent(calendar, title, date, location, attendees, reminder, false);
				if (calendar.getEvents().get(event.getTitle()) == null) {
					calendar.getEvents().put(event.getTitle(), event);
					calendarRepository.save(calendar);
					response = "Event Created";
				} else {
					response = "Event Already Exists";
				}
			} else {
				response = "Calender Missing";
			}
		} else {
			response = "Authorizaion Invalid";
		}
		log.info("Create new calendar event called for name: " + name + " username: " + username + " title: " + title + " -> " + response);
		return response;	
	}

	/**
	 * REST GET mapping for retrieving exiting calendars
	 * 
	 * @return String JSON list of calendars, empty JSON list '{}' if no calendars exist
	 */
	@GetMapping(path="/")
	public @ResponseBody Iterable<Calendar> getAllCalendars() {
		log.info("Get all calendars called");
		return calendarRepository.findAll();
	}

	/**
	 * REST GET mapping for retrieving an existing calendar.
	 * 
	 * @param request HttpServletRequest to check Authorization header
	 * @param name calendar name
	 * @param username user name
	 * @return String JSON calendar, blank if the calendar does not exist
	 */
	@GetMapping(path="/", params= { "name", "username" })
	public @ResponseBody Calendar getCalendar(@RequestParam String name, @RequestParam String username) {
		log.info("Get calendar event called for name: " + name + " username: " + username);
		return calendarRepository.findByNameAndUsername(name, username);
	}

	/**
	 * REST GET mapping for retrieving existing events for a given calendar.
	 * 
	 * @param name calendar name
	 * @param username user name
	 * @returns String JSON event list, empty JSON list '{}' if no events exist for the specified calendar
	 */
	@GetMapping(path="/event", params= { "name", "username" })
	public @ResponseBody Map<String, CalendarEvent> getAllCalendarEvents(@RequestParam String name, @RequestParam String username) {
		Map<String, CalendarEvent> calendarEvents = null;
		Calendar calendar = calendarRepository.findByNameAndUsername(name, username);
		if (calendar != null ) {
			calendarEvents = calendar.getEvents();
		}
		log.info("Get calendar events called for name: " + name + " username: " + username);
		return calendarEvents;
	}

	/**
	 * REST GET mapping for retrieving an existing event.
	 * 
	 * @param name calendar name
	 * @param username user name
	 * @param title event title
	 * @returns String JSON event, blank if events does not exist for the specified calendar and title
	 */
	@GetMapping(path="/event", params= { "name", "username", "title" })
	public @ResponseBody CalendarEvent getCalendarEvent(@RequestParam String name, @RequestParam String username, @RequestParam String title) {
		CalendarEvent calendarEvent = null;
		Calendar calendar = calendarRepository.findByNameAndUsername(name, username);
		if (calendar != null ) {
			calendarEvent = calendar.getEvents().get(title);
		}
		log.info("Get calendar event called for name: " + name + " username: " + username + " title: " + title);
		return calendarEvent;
	}

	/**
	 * REST GET mapping for retrieving all events on a specified calendar for a specified day.
	 * 
	 * @param name calendar name
	 * @param username user name
	 * @param date date of specified day to retrieve
	 * @return String JSON event list, empty JSON list '{}' if no events exist for the specified calendar and date
	 */
	@GetMapping(path="/event/day")
	public @ResponseBody Iterable<CalendarEvent> getCalendarEventsForDay(@RequestParam String name, @RequestParam String username, @RequestParam @DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss") Date date) {
		log.info("Get calendar events called for specified date for name: " + name + " username: " + username + " date:" + dateFormat.format(date));
		return calendarEventRepository.findEventsForDay(name, username, date);
	}

	/**
	 * REST GET mapping for retrieving all events on a specified calendar for a specified week.
	 * 
	 * @param name calendar name
	 * @param username user name
	 * @param date date in specified week to retrieve
	 * @return String JSON event list, empty JSON list '{}' if no events exist for the specified calendar and week
	 */
	@GetMapping(path="/event/week")
	public @ResponseBody Iterable<CalendarEvent> getCalendarEventsForWeek(@RequestParam String name, @RequestParam String username, @RequestParam @DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss") Date date) {
		log.info("Get calendar events called for specified week for name: " + name + " username: " + username + " date:" + dateFormat.format(date));
		return calendarEventRepository.findEventsForWeek(name, username, date);
	}

	/**
	 * REST GET mapping for retrieving all events on a specified calendar for a specified month.
	 * 
	 * @param name calendar name
	 * @param username user name
	 * @param date date in specified month to retrieve
	 * @return String JSON event list, empty JSON list '{}' if no events exist for the specified calendar and month
	 */
	@GetMapping(path="/event/month")
	public @ResponseBody Iterable<CalendarEvent> getCalendarEventsForMonth(@RequestParam String name, @RequestParam String username, @RequestParam @DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss") Date date) {
		log.info("Get calendar events called for specified month for name: " + name + " username: " + username + " date:" + dateFormat.format(date));
		return calendarEventRepository.findEventsForMonth(name, username, date);
	}

	/**
	 * REST POST mapping for updating an existing event.
	 * Requires a valid auth token.
	 * @see checkToken
	 * 
	 * @param request HttpServletRequest to check Authorization header
	 * @param name calendar name
	 * @param username user name
	 * @param title event title
	 * @param date event date and time
	 * @param location event location
	 * @param attendees event attendee list
	 * @param reminder event reminder date and time, used to send automated reminder of event
	 * @return String status of the request
	 */
	@PostMapping(path="/event")
	public @ResponseBody String updateCalendarEvent(HttpServletRequest request, @RequestParam String name, @RequestParam String username, 
			@RequestParam String title, @RequestParam @DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss") Date date, @RequestParam String location, 
			String attendees, @RequestParam @DateTimeFormat(pattern="yyyy-MM-dd HH:mm:ss") Date reminder) {
		String response = "";
		if (checkToken(username, request.getHeader("Authorization"))) {
			Calendar calendar = calendarRepository.findByNameAndUsername(name, username);
			
			if (calendar != null) {
				CalendarEvent event = calendar.getEvents().get(title);
				
				if (event != null) {
					event.update(date, location, attendees, reminder);
					calendarRepository.save(calendar);
					response = "Event Updated";
				} else {
					response = "Event Missing";
				}
			} else {
				response = "Calendar Missing";
			}			
		} else {
			response = "Authorizaion Invalid";
		}
		log.info("Update calendar event called for name: " + name + " username: " + username + " title: " + title + " -> " + response);
		return response;
	}

	/**
	 * REST DELETE mapping for removing an existing calendar.
	 * Requires a valid auth token.
	 * @see checkToken
	 * 
	 * @param request HttpServletRequest to check Authorization header
	 * @param name calendar name
	 * @param username user name
	 * @return String status of the request
	 */
	@DeleteMapping(path="/")
	public @ResponseBody String deleteCalendar(HttpServletRequest request, @RequestParam String name, @RequestParam String username) {
		String response = "";
		if (checkToken(username, request.getHeader("Authorization"))) {
			Calendar calendar = calendarRepository.findByNameAndUsername(name, username);
			if (calendar != null) {
				calendarRepository.delete(calendar);
				response = "Calendar Deleted";
			} else {
				response = "Calendar Missing";
			}
		} else {
			response = "Authorizaion Invalid";
		}
		log.info("Delete calendar called for name: " + name + " username: " + username + " -> " + response);
		return response;
	}

	/**
	 * REST DELETE mapping for removing an existing event.
	 * Requires a valid auth token.
	 * @see checkToken
	 * 
	 * @param request HttpServletRequest to check Authorization header
	 * @param name calendar name
	 * @param username user name
	 * @param title event title
	 * @return String status of the request
	 */
	@DeleteMapping(path="/event")
	public @ResponseBody String deleteCalendarEvent(HttpServletRequest request, @RequestParam String name, @RequestParam String username, @RequestParam String title) {
		String response = "";
		if (checkToken(username, request.getHeader("Authorization"))) {
			Calendar calendar = calendarRepository.findByNameAndUsername(name, username);
			if (calendar != null) {
				CalendarEvent event = calendar.getEvents().remove(title);
				if (event != null) {
					calendarRepository.save(calendar);
					response = "Event Deleted";
				}
				else {
					response = "Event Missing";
				}
			} else {
				response = "Calendar Missing";
			}
		} else {
			response = "Authorizaion Invalid";
		}
		log.info("Delete calendar event called for name: " + name + " username: " + username + " title: " + title + " -> " + response);
		return response;
	}
	
}